#include "gtest/gtest.h"

#define WITHIN_VS
#include "sudoku-solver.h"

TEST(SUDOKU_SOLVER, VERY_EASY)
{
	grid_t grid;

	array<array<char, 9>, 9> input =
	{
		'1','2','?','?','7','?','5','6','?',
		'5','?','7','9','3','2','?','8','?',
		'?','?','?','?','?','1','?','?','?',
		'?','1','?','2','4','?','?','5','?',
		'3','?','8','?','?','?','4','?','2',
		'?','7','?','?','8','5','?','1','?',
		'?','?','?','7','?','?','?','?','?',
		'?','8','?','4','2','3','7','?','1',
		'?','3','4','?','1','?','?','2','8'
	};

	for (int row = 0; row < 9; row++)
	{
		for (int col = 0; col < 9; col++)
		{
			const char c = input[row][col];
			if (c >= '1' && c <= '9')
				grid[row][col] = square(c - '0');
		}
	}

	ASSERT_TRUE(solver().traverse(grid));
}

TEST(SUDOKU_SOLVER, EASY)
{
	grid_t grid;

	array<array<char, 9>, 9> input =
	{
'0','0','0','7','0','0','0','4','0',
'0','2','0','8','0','1','9','0','0',
'0','0','0','0','0','0','1','7','3',
'1','0','2','0','0','6','0','9','7',
'6','0','0','0','9','0','0','0','1',
'9','7','0','1','0','0','4','0','5',
'3','5','4','0','0','0','0','0','0',
'0','0','8','6','0','4','0','3','0',
'0','1','0','0','0','3','0','0','0',
	};

	for (int row = 0; row < 9; row++)
	{
		for (int col = 0; col < 9; col++)
		{
			const char c = input[row][col];
			if (c >= '1' && c <= '9')
				grid[row][col] = square(c - '0');
		}
	}

	ASSERT_TRUE(solver().traverse(grid));
}

TEST(SUDOKU_SOLVER, INTERMEDIATE_HARD)
{
	grid_t grid;

	array<array<char, 9>, 9> input =
	{
'?','?','6','?','?','?','?','5','?',
'?','?','3','7','?','?','?','?','?',
'7','?','?','?','3','5','?','?','8',
'?','?','?','?','7','?','?','1','2',
'?','?','?','9','4','2','?','?','?',
'6','2','?','?','8','?','?','?','?',
'9','?','?','1','2','?','?','?','3',
'?','?','?','?','?','3','6','?','?',
'?','5','?','?','?','?','7','?','?'
	};

	for (int row = 0; row < 9; row++)
	{
		for (int col = 0; col < 9; col++)
		{
			const char c = input[row][col];
			if (c >= '1' && c <= '9')
				grid[row][col] = square(c - '0');
		}
	}

	ASSERT_TRUE(solver().traverse(grid));
}

TEST(SUDOKU_SOLVER, WORLD_HARDEST_SUDOKU)
{
	grid_t grid;

	array<array<char, 9>, 9> input =
	{
'8','0','0','0','0','0','0','0','0',
'0','0','3','6','0','0','0','0','0',
'0','7','0','0','9','0','2','0','0',
'0','5','0','0','0','7','0','0','0',
'0','0','0','0','4','5','7','0','0',
'0','0','0','1','0','0','0','3','0',
'0','0','1','0','0','0','0','6','8',
'0','0','8','5','0','0','0','1','0',
'0','9','0','0','0','0','4','0','0'
	};

	for (int row = 0; row < 9; row++)
	{
		for (int col = 0; col < 9; col++)
		{
			const char c = input[row][col];
			if (c >= '1' && c <= '9')
				grid[row][col] = square(c - '0');
		}
	}

	ASSERT_TRUE(solver().traverse(grid));
}